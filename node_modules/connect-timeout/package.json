{
  "_args": [
    [
      {
        "raw": "connect-timeout@^1.9.0",
        "scope": null,
        "escapedName": "connect-timeout",
        "name": "connect-timeout",
        "rawSpec": "^1.9.0",
        "spec": ">=1.9.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Ruhi\\.jenkins\\workspace\\test"
    ]
  ],
  "_from": "connect-timeout@>=1.9.0 <2.0.0",
  "_id": "connect-timeout@1.9.0",
  "_inCache": true,
  "_location": "/connect-timeout",
  "_nodeVersion": "6.10.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/connect-timeout-1.9.0.tgz_1494985361258_0.5828525682445616"
  },
  "_npmUser": {
    "name": "dougwilson",
    "email": "doug@somethingdoug.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "connect-timeout@^1.9.0",
    "scope": null,
    "escapedName": "connect-timeout",
    "name": "connect-timeout",
    "rawSpec": "^1.9.0",
    "spec": ">=1.9.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/connect-timeout/-/connect-timeout-1.9.0.tgz",
  "_shasum": "bc27326b122103714bebfa0d958bab33f6522e3a",
  "_shrinkwrap": null,
  "_spec": "connect-timeout@^1.9.0",
  "_where": "C:\\Users\\Ruhi\\.jenkins\\workspace\\test",
  "bugs": {
    "url": "https://github.com/expressjs/timeout/issues"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com",
      "url": "http://jongleberry.com"
    }
  ],
  "dependencies": {
    "http-errors": "~1.6.1",
    "ms": "2.0.0",
    "on-finished": "~2.3.0",
    "on-headers": "~1.0.1"
  },
  "description": "Request timeout middleware for Connect/Express",
  "devDependencies": {
    "eslint": "3.19.0",
    "eslint-config-standard": "10.2.1",
    "eslint-plugin-import": "2.2.0",
    "eslint-plugin-markdown": "1.0.0-beta.6",
    "eslint-plugin-node": "4.2.2",
    "eslint-plugin-promise": "3.5.0",
    "eslint-plugin-standard": "3.0.1",
    "istanbul": "0.4.5",
    "mocha": "2.5.3",
    "supertest": "1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "bc27326b122103714bebfa0d958bab33f6522e3a",
    "tarball": "https://registry.npmjs.org/connect-timeout/-/connect-timeout-1.9.0.tgz"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "files": [
    "LICENSE",
    "HISTORY.md",
    "index.js"
  ],
  "gitHead": "f2f520f335f2f2ae255d4778e908e8d38e3a4e68",
  "homepage": "https://github.com/expressjs/timeout#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "aaron",
      "email": "aaron.heckmann+github@gmail.com"
    },
    {
      "name": "defunctzombie",
      "email": "shtylman@gmail.com"
    },
    {
      "name": "dougwilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "fishrock123",
      "email": "fishrock123@rocketmail.com"
    },
    {
      "name": "jongleberry",
      "email": "jonathanrichardong@gmail.com"
    },
    {
      "name": "mscdex",
      "email": "mscdex@mscdex.net"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "name": "connect-timeout",
  "optionalDependencies": {},
  "readme": "# connect-timeout\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nTimes out a request in the Connect/Express application framework.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install connect-timeout\n```\n\n## API\n\n**NOTE** This module is not recommend as a \"top-level\" middleware (i.e.\n`app.use(timeout('5s'))`) unless you take precautions to halt your own\nmiddleware processing. See [as top-level middleware](#as-top-level-middleware)\nfor how to use as a top-level middleware.\n\nWhile the library will emit a 'timeout' event when requests exceed the given\ntimeout, node will continue processing the slow request until it terminates.\nSlow requests will continue to use CPU and memory, even if you are returning\na HTTP response in the timeout callback. For better control over CPU/memory,\nyou may need to find the events that are taking a long time (3rd party HTTP\nrequests, disk I/O, database calls) and find a way to cancel them, and/or\nclose the attached sockets.\n\n### timeout(time, [options])\n\nReturns middleware that times out in `time` milliseconds. `time` can also\nbe a string accepted by the [ms](https://www.npmjs.org/package/ms#readme)\nmodule. On timeout, `req` will emit `\"timeout\"`.\n\n#### Options\n\nThe `timeout` function takes an optional `options` object that may contain\nany of the following keys:\n\n##### respond\n\nControls if this module will \"respond\" in the form of forwarding an error.\nIf `true`, the timeout error is passed to `next()` so that you may customize\nthe response behavior. This error has a `.timeout` property as well as\n`.status == 503`. This defaults to `true`.\n\n### req.clearTimeout()\n\nClears the timeout on the request. The timeout is completely removed and\nwill not fire for this request in the future.\n\n### req.timedout\n\n`true` if timeout fired; `false` otherwise.\n\n## Examples\n\n### as top-level middleware\n\nBecause of the way middleware processing works, once this module\npasses the request to the next middleware (which it has to do in order\nfor you to do work), it can no longer stop the flow, so you must take\ncare to check if the request has timedout before you continue to act\non the request.\n\n```javascript\nvar bodyParser = require('body-parser')\nvar cookieParser = require('cookie-parser')\nvar express = require('express')\nvar timeout = require('connect-timeout')\n\n// example of using this top-level; note the use of haltOnTimedout\n// after every middleware; it will stop the request flow on a timeout\nvar app = express()\napp.use(timeout('5s'))\napp.use(bodyParser())\napp.use(haltOnTimedout)\napp.use(cookieParser())\napp.use(haltOnTimedout)\n\n// Add your routes here, etc.\n\nfunction haltOnTimedout (req, res, next) {\n  if (!req.timedout) next()\n}\n\napp.listen(3000)\n```\n\n### express 3.x\n\n```javascript\nvar express = require('express')\nvar bodyParser = require('body-parser')\nvar timeout = require('connect-timeout')\n\nvar app = express()\napp.post('/save', timeout('5s'), bodyParser.json(), haltOnTimedout, function (req, res, next) {\n  savePost(req.body, function (err, id) {\n    if (err) return next(err)\n    if (req.timedout) return\n    res.send('saved as id ' + id)\n  })\n})\n\nfunction haltOnTimedout (req, res, next) {\n  if (!req.timedout) next()\n}\n\nfunction savePost (post, cb) {\n  setTimeout(function () {\n    cb(null, ((Math.random() * 40000) >>> 0))\n  }, (Math.random() * 7000) >>> 0)\n}\n\napp.listen(3000)\n```\n\n### connect\n\n```javascript\nvar bodyParser = require('body-parser')\nvar connect = require('connect')\nvar timeout = require('connect-timeout')\n\nvar app = connect()\napp.use('/save', timeout('5s'), bodyParser.json(), haltOnTimedout, function (req, res, next) {\n  savePost(req.body, function (err, id) {\n    if (err) return next(err)\n    if (req.timedout) return\n    res.send('saved as id ' + id)\n  })\n})\n\nfunction haltOnTimedout (req, res, next) {\n  if (!req.timedout) next()\n}\n\nfunction savePost (post, cb) {\n  setTimeout(function () {\n    cb(null, ((Math.random() * 40000) >>> 0))\n  }, (Math.random() * 7000) >>> 0)\n}\n\napp.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/connect-timeout.svg\n[npm-url]: https://npmjs.org/package/connect-timeout\n[travis-image]: https://img.shields.io/travis/expressjs/timeout/master.svg\n[travis-url]: https://travis-ci.org/expressjs/timeout\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/timeout/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/timeout?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/connect-timeout.svg\n[downloads-url]: https://npmjs.org/package/connect-timeout\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expressjs/timeout.git"
  },
  "scripts": {
    "lint": "eslint --plugin markdown --ext js,md .",
    "test": "mocha --reporter spec --bail --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter dot --check-leaks test/"
  },
  "version": "1.9.0"
}
